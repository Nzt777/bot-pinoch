import os
import logging
from datetime import datetime, timedelta
import pytz
import requests
from telegram import Update, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

user_states = {}
user_timezones = {}
user_reminders = {}
user_payments = {}

# –†–µ–∫–ª–∞–º–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É)
AD_TEXT = "\n\nüì£ *–†–µ–∫–ª–∞–º–∞*: –ü–æ–¥–ø–∏—à–∏—Å—å –∑–∞ 100‚ÇΩ/–º–µ—Å –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ª—é–±—ã–µ –¥–Ω–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã. –ù–∞–ø–∏—à–∏ /subscribe"
AD_IMAGE_URL = None  # –ù–∞–ø—Ä–∏–º–µ—Ä: "https://yourdomain.com/ad.jpg"

def get_timezone_by_city(city: str) -> str:
    try:
        response = requests.get("http://worldtimeapi.org/api/timezone")
        if response.status_code == 200:
            zones = response.json()
            for zone in zones:
                if city.lower() in zone.lower():
                    return zone
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
    return "Europe/Moscow"

def user_has_subscription(user_id: int) -> bool:
    expiry = user_payments.get(user_id)
    return expiry and expiry > datetime.utcnow()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_city"
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!
–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏ —è –ø–æ–¥—Å—Ç—Ä–æ—é—Å—å –ø–æ–¥ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å." + (AD_TEXT if not user_has_subscription(user_id) else ""))

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = ("üíé *–ü–æ–¥–ø–∏—Å–∫–∞*: 100‚ÇΩ –≤ –º–µ—Å—è—Ü
"
           "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ª—é–±—ã–µ –¥–Ω–∏
"
           "‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã

"
           "üîê –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Ä—É—á–Ω—É—é. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 100‚ÇΩ —á–µ—Ä–µ–∑ –°–ë–ü (–°–±–µ—Ä–±–∞–Ω–∫/–¢–∏–Ω—å–∫–æ—Ñ—Ñ) –Ω–∞ –Ω–æ–º–µ—Ä +7-999-123-45-67 –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"
           "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
"
           "`/activate {your_user_id}` (–¥–ª—è —Ç–µ—Å—Ç–∞).")
    await update.message.reply_text(msg, parse_mode="Markdown")

async def activate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 123456789:  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
        return
    try:
        target_id = int(context.args[0])
        user_payments[target_id] = datetime.utcnow() + timedelta(days=30)
        await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {target_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /activate user_id")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_states:
        user_states[user_id] = "waiting_city"
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:" + (AD_TEXT if not user_has_subscription(user_id) else ""))
        return

    state = user_states[user_id]

    if state == "waiting_city":
        tz = get_timezone_by_city(text)
        user_timezones[user_id] = tz
        user_states[user_id] = "waiting_time"
        await update.message.reply_text(f"–û–∫–µ–π, —è –Ω–∞—Å—Ç—Ä–æ–∏–ª —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞: {tz}.
–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00" + (AD_TEXT if not user_has_subscription(user_id) else ""))
    elif state == "waiting_time":
        try:
            tz = pytz.timezone(user_timezones[user_id])
            now = datetime.now(tz)
            remind_hour, remind_minute = map(int, text.split(":"))
            remind_time = now.replace(hour=remind_hour, minute=remind_minute, second=0, microsecond=0)
            if remind_time < now:
                remind_time += timedelta(days=1)
            if not user_has_subscription(user_id) and remind_time.date() > now.date():
                await update.message.reply_text("‚õî –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
–ù–∞–ø–∏—à–∏ /subscribe, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å.")
                return
            user_reminders[user_id] = remind_time
            user_states[user_id] = "waiting_message"
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å:" + (AD_TEXT if not user_has_subscription(user_id) else ""))
        except:
            await update.message.reply_text("‚õî –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    elif state == "waiting_message":
        remind_time = user_reminders.get(user_id)
        if remind_time:
            context.job_queue.run_once(callback=reminder, when=(remind_time - datetime.now(pytz.timezone(user_timezones[user_id]))).total_seconds(), chat_id=update.effective_chat.id, name=str(user_id), data=text)
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%H:%M')} ({user_timezones[user_id]})" + (AD_TEXT if not user_has_subscription(user_id) else ""))
            user_states.pop(user_id, None)
            user_reminders.pop(user_id, None)

async def reminder(context: ContextTypes.DEFAULT_TYPE):
    text = context.job.data
    chat_id = context.job.chat_id
    await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("activate", activate))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()